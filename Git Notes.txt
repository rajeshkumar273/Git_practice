
========================================================
Source Code Repository Tools (or) Version Control Softwares
========================================================

-> Multiple developers will work for project development

-> Developers will be working from multiple locations

-> All developers code should be stored at one place (Code Integration Should Happen)

-> To integrate all the developers source code at one place we will use Source Code Repository Softwares


================================================
Advantages with Source code repository sofwares
================================================

1) All the developers can connect to repository server and can integrate the code

2) Code Integration will become easy

3) Repository server will provide monitored access

				- Who
			        - When
				- Why
				- What
How to revert t he changes in git 100% interveiw question?    (In batabase we can call rollback and in git or bitbucket call revert)
=========================================================

This is we can done in two ways?

1. Whatever changes you done, again, change it previous version manullay and commit and push the changes. (If you remember what you did, one or two lines are there) 

2.  If more files are there, we can go for "git log" command.

copy latest commit id "ab11371600c65a12a7b6aa904d10a3ff61cce1cb"

git revert ab11371600c65a12a7b6aa904d10a3ff61cce1cb

git push (Check Git hub to latest changes)



==============
Repository Tools
==============

SVN (outdated)

Git Hub

BitBucket


=================================
Environment Setup to work with Git Hub
=================================

1) Create Github account ( www.github.com )

2) Download and install Git Client software ( https://git-scm.com/downloads )

3) Once installation completed, right click on the mouse and verify git options display (If git options displaying our git client installation completed successfully)


=====================
Working with GitHub
=====================

-> Login into github account with your credentials

-> Create Repository in github

Note: Repository is used to store project source code. Every Project will have one repository

-> When we create a repository, unique URL will be generated with Repository Name (i.e Repo URL)

		Ex: https://github.com/ashokitschool/hdfc_bank_app.git

-> All the developers will connect to repository using Repository URL

-> We can create 2 types of Repositories in Git Hub
	
			1) public repository 

			2) private repository

-> Public Repository means everybody can access but we can choose who can modify our repository

-> Private Repository means we will choose who can access and who can modify


		Repo URL : https://github.com/ashokitschool/01-devops-app.git


====================
Working with Git Bash
====================

-> Git Bash we can use as Git Client software to perform Git Operations

-> Download and install git client (https://git-scm.com/downloads)

-> Right Click on Mouse and choose "Open Git Bash Here"


git help : It will display frequently used git commands

git help <cmd-name> : It will open documentation for given command


==================================================
Configure Your Email and Name in Git Bash with Commands
==================================================

$ git config --global user.email "youremail@yourdomain.com"

$ git config --global user.name "name"

Note: email and name we will configure only for first time.


$ git init : To initialize our folder as git working tree folder

$ git clone : To clone git repository to our machine from github.com 

		Syntax : $ git clone <project-repo-url>

$ git status : It will display staged , un-staged and un-tracked files

		Syntax : $ git status

		Staged Files : The files which are added for commit

		Un-Staged Files : The files which are modified but not added for commit

		Un-tracked files : Newly created files

Note: To commit a file(s), we should add to staging area first


$ git add : It is used to add file(s) to staging area

		Syntax : $ git add <file-name>

				$ git add .


$ git commit : It is used to commit staged files to git local repository

		Syntax : $ git commit -m 'reason for commit'


$ git push : To push changes from git local repository to git central repository

		Syntax  : $ git push

$ git rm : To remove file(s) from repository


Remote Commands in Git:

In Git terminology, a remote refers to a repository that is hosted on a server or a cloud platform like GitHub, GitLab, or Bitbucket, and it typically serves as a centralized location for collaborators to share code. It acts as a pointer or a link to the external repository where your local Git repository is connected.


git remote add <name> <url>: Add a new remote repository.

git remote add origin https://github.com/your-repo.git
git push origin main

git remote -v: View the list of remote repositories.

git push <remote>: Push changes to the remote repository.

git pull <remote>: Pull changes from the remote repository to Local repository.

git fetch <remote>: Fetch updates from the remote without merging them.
				


==================================================
Steps to push code to github central repository
==================================================

1) Create one public repository in git hub (take github repo url)

2) Clone github repository using 'git clone' command

		$ git clone 'repo-url'

3) Navigate to repository folder

4) Create one file in repository folder

		$ touch Demo.java

5) Check status of the file using 'git status' command

		$ git status (It will display as untracked file)

6) Add file to staging area using 'git add' command

		$ git add .

7) Commit file to git local repository

		$ git commit -m 'commit-msg'

8) Push file from git local repository to git central repository using 'git push' command

		$ git push

Note: If you are doing 'git push' for first time it will ask to enter your github account password.


------------------------------------------------------------------------------------------------------------------
Note: Git bash will ask our password only for first time. It will save our git credentials in Credential Manager in Windows machine.

-> Go to Credential Manager -> Windows Credentials -> Select Github -> We can modify and delete saved credentials from here
------------------------------------------------------------------------------------------------------------------

-> When we do git commit then it will geneate a commit-id with 40 characters length

-> From this commit-id it will display first 7 characters in git hub central repository

-> We can check commit history using 'git log' command

==================================================
Steps to commit Maven Project to Github Repository
==================================================

1) Create Maven Project

2) Create GitHub Repository

Note: After creating git repository, it will display set of commands to execute

3) Open gitbash from project folder and execute below commands

$ git init
$ git add .
$ git commit -m 'commit-msg'
$ git branch -M main
$ git remote add origin <repo-url>
$ git push -u origin master

--------------------------------------------------------------------------------------------------------------------

When we are working on one task suddenly we may get some other priority task.

Usecase
++++++++
-> ager assigned task id : 101
-> I am working on that task (i am in middle of the task)
-> Managed told that stop the work for 101 and complete 102 on priority. 
-> Once 102 is completed then resume your work on 101

-> When manager asked me to start 102 task, i have already done few changes for 101 
  (partially completed)
  
-> We can't push partial changes to repository because with our partial changes existing functionality may break.

-> We can't delete our changes because we have spent few hours of time to implement those changes


***************  In this scenario we will go for 'git stash' option *********************

=> Git stash is used to save working tree changes to temporary location and make working tree clean.

-> After priority work completed we can get stashed changes back using 'gitstash apply'


============
Git Branches
============

-> Branches are used to maintain seperate code bases for our project

-> In GiT repository we can create multiple branches

main
develop
qa
release
research


-> development team will integrate the code in 'develop' branch

-> bug-fixing team will integrate the code in 'qa' branch

-> R & D team will integrate the code in 'research' branch


-> In github we can create branches

-> To clone particular branch in git repo we will use below command

		$ git clone -b <branch-name> <repo-url>

==============
Branch Merging
==============

=> The process of merging changes from one branch to another branch is called as Branch merging

=> We will use Pull Request for Branch Merging

============================
Steps to do branch merging
============================

1) Create feature branch from main branch

2) clone feature branch 

3) create new file in feature branch then commit and push to central repo

4) Go to central repository then create pull request to merge feature branch changes to main branch

Note: Once feature branch changes are merged to main branch then we can delete feature branch (if required)

=========================
What is .gitignore ?
=========================

-> This .gitignore is used to configure the files or folders which we want to ignore from our commits

-> The files and folders which are not required to commit to central repository those things we can configure in .gitignore file

Ex: In maven project, 'target' folder will be available which is not required to commit to central repository. This we can configure in .gitignore file.

---------------------------------------.gitignore-------------------------------------------------------
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

=========================
git merge vs git rebase
==========================

=> These commands are used to merge changes from one branch to another branch

-> git merge will preserve commit history

-> git rebase will not preserve that rebase history

-> When we are working on particular sprint and we want to merge changes from one branch to another branch then we will use 'git merge' command

-> Once sprint-1 is delivered then we want to take latest code of sprint-1 to start sprint-2 development. In this scenario we don't need commit history so we will use 'git rebase' command.

===========================
What is git pull command 
===========================

-> pull command is used to take latest changes from repository to local

-> When we want to make some changes to code, it is always recommended to take git pull first then start your changes.


Note: When we execute 'git pull' there is a chance of getting conflicts. We need to resolve the conflict and we should push the code without conflicts.


=============================================================================
git diff : It is used to compare the files ( local file & repository file)

git squash : It is used to combine multiple commits into single commit

git bisect : It is used to identify the bad commit which introduced bug.

==============================================================================


==================
Git Hub Lab Task
==================
1) Create Maven Web Application
2) Add 'Spring-Core' dependency in project pom.xml file (www.mvnrepository.com)
3) Package maven project as war file using maven goal
4) Create Git repository in github / bitbucket (public repo)
5) Push maven project into github repo using gitbash
   (target folder shouldn't be commited, add this in .gitignore file)
6) Make changes in pom.xml and push changes to github repo using git bash
7) Create 'feature' branch in git repo from main branch
8) Switch to feature branch from git bash
9) Make changes in 'feature' branch pom.xml file 
10) Push changes to feature branch
11) Create pull request and merge 'feature' branch changes to 'main' branch


=======================
Git Hub Class Summary
========================
1) What is Source Code repository
2) Why we need source code repository
3) What are the source code repositories available
4) What is git hub
5) What is git 
6) What is Repository
7) Public Repository vs Private Repository
8) Cloning Repository
9) Staged vs Unstaged vs Untracked File
10) Adding Files to Stating Area
11) Unstaging the files from staging
12) Discarding local changes
13) What is working tree
14) What is Local Repostiory
15) What is Central / Remote Repository
16) Commit from working tree to local repo  (git commit -m 'msg')
17) push from local repo to central repo (git push)
18) Taking latest code changes
19) push vs pull
20) What is conflict
21) How to resolve conflicts
22) What is branch in git hub
23) How to create branches
24) How to clone particular branch ( git clone -b <branch-name> <repo-url> )
25) how to switch to particular branch (git checkout <branch-name>)
26) How to merge branches
27) What is pull request
28) git merge vs rebase
29) what is .gitignore
30) Working with Bitbucket

git init
git help
git config
git clone 
git status
git add .
git add <file-name>
git restore
git commit
git push
git pull
git log
git rm
git revert
git branch
git checkout
git fetch
git merge
git rebase
git stash
git squash


git restore

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   src/main/java/com/example/controller/BankController.java

use "git restore --staged <file>..." to unstage)
        deleted:    rajesh.txt


On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean



git restore --staged




Important git commands
----------------------

1) git clone vs git pull

	git clone is used to complete project from remote to local, git pull is used to pull latest changes. 

2) git push vs git pull

3) git stash & git stash apply

	stash is used to store our working tree changes to temporary area. 
		
	From temporary changes to working tree, then I need to use git stash apply.



git fetch vs git pull

if you go for git pull, directly it will fetch changes from remote to working directory. 
git fetch is used to download changes from remote to local. but not to the working tree. 


git merge vs git rebase




git checkout develop

touch f1.txt

git status

git add .

git commit -m 'new file is added in to develop branch'

git push

we merge our changes in 3 ways
	pull request
	git merge
	git rebase

git merge ---> will maintain commit history, in which order the files are committed. If you want preserve the commit history. 

git rebase --> here commit history will not preserve. 


git merge develop (means whatever the latest changes available in develop branch get those changes to main branch also)

after that give git push


Whenever we are merging branches and whenever we are pulling latest code, there is chance of merge conflict. 

What is a merge conflict - the problem, that we are facing when the same file and same line number having the change. 


To produce this scanario, I changed first remote reposotry, and Locally I changed same file and same line( trying to push changes to remote without pull)
==========================================================================================================================================================
To https://github.com/rajeshkumar273/Local_Project.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/rajeshkumar273/Local_Project.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Now I am trying to do git pull command  
======================================
(People will be working on same file, they may be working on same lines also, we don't know --> When multiple developers are working same file and same line, git pull command will not be working) 

$ git pull
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
Unpacking objects: 100% (3/3), 962 bytes | 26.00 KiB/s, done.
From https://github.com/rajeshkumar273/Local_Project
   fc58c46..b0d7365  main       -> origin/main
Auto-merging f3
CONFLICT (content): Merge conflict in f3
Automatic merge failed; fix conflicts and then commit the result.

Interview Question
==================
What are the problems that you faced in your project?

When I am trying to push my code, it rejected my push because some changes pushed by my project team member from other location. Then I tried to take the latest code changes by using git pull command. Unfortunately my changes and that developer same class and same line number then I got conflict problem. 

<<<<<<< HEAD
My content is going to change.     (
=======
New Content is going to add in this file. 
>>>>>>> b0d73655a15e75ace6637bdc4cce36adc1fd7ec0


How I resolve means, I will keep both lines of code. commit and push. 



How to do revert 
How to resolve the merge conflict.



=========
BitBucket
=========

-> Version control software

-> Developed By Atlasian Company

-> BitBucket / GitHub internally uses git as version control



What is tagging in Git Hub?

===========================

Tagging is used to take historical commits.  Whatever code is available that I want to take it as backup for release purpose. 


From last one week, I have done, three 3 commits, whatever code I have done, I want to take it as backup for release purpose. 


git tag v1.0

later I did commit 4 and 5 commit, So marked as git tag v2.0

Tagging is used to mark the code for release. 

When I created first tag, one zip will be created, When I created second tag, one more zip file will be created. 



modify something 

git add .

git commit -m 'modified the BankController file'

git push

git tag --> to show available tags


to create tag
=============

git tag <tag-name>

git tag v1.0


to show available tags
======================

git tag show v1.0  


pushing tag to available
========================

git push origin v1.1




Common questions
----------------

1.Delete a branch

git branch -d <branch name>

2. Merge a branch into the active branch

git merge <branch name>

3. Merge a branch into a target branch

git merge <Source branch> <target branch>

4. commit changes

git commit -m 'commit message'

5. Remove a file (or folder) 

git rm -r <file-name.txt>

6.Create a new branch 

git branch <branch-name>

7. Merge a branch into the active branch

git merge <branch name>

8. Push a branch to your remote repository

git push origin <branch name>

9. Pull changes from remote repository

git pull origin <branch name>

10. Add a remote repository

git remote add origin




=========
Git Hub
=========

=> It is version control software

-> Git Hub is a platform which is used to store project related files/code

-> In git hub, we can create source code repository to store project code.

-> All the developers can connect to project repository to store all the source code
   (Code Integration will become easy)

-> Git Hub repository will monitor all code changes

		 - who modified
		 - when modified
	     - what modified
		 - why modified

===================
Environment Setup
===================

1) Create account in www.github.com

2) Download & Install git client software

3) Open Git bash and configure your name and email

	$ git config --global user.name "your-name"

	$ git config --global user.email "your-email"

Note: Configuring name and email is just one time process.


===============================
What is Git Hub Repository ?
===============================

=> Repository is a place where we can store project source code / files.

=> For every project one repository will be created

=> We can create 2 types of repositories in git hub

	1) Public Repo (anybody can see & you choose who can commit)

	2) Private Repo (you choose who can see & commit)


## Project Git repo URL : https://github.com/ashokitschool/dcb_loans_app.git	

=> Project team members will connect with git repository using its URL.

==================
Git Architecture
==================

1) Working Tree

2) Stating Area

3) Local Repo

4) Central Repo

==============
Git commands
===============

git config : To configure name & email

git init : To initialize working tree

git status : To check working tree status

git add : To add files to staging area

git commit : To commit files from staging to local repo

git push : To send files from local repo to remote repo

git clone : To clone remote repo to local machine

git log : To see commit history

git restore : 1) To discard changes when the file is in unstaged state
			  
			  2) To unstage the file when it is added to staging area

git rm : To remove files  (rm + commit + push)

git revert : To remove our commits from central repository

			$ git revert <commit-id>

git pull : To take latest changes from central repo to local repo


==========================
What is .gitignore file ?
==========================

=> .gitignore is used to exclude files & folders from our commits

Ex: In maven project,  we should n't commit target folder to git repository hence we can give this info to git using .gitignore file.

=============
Git Branches
=============

=> In a project multiple teams will work paralelly

		1) Bug fixing
		2) Enhancements
		3) change request
		4) Research & Development

=> When multiple teams work on single repository then it will become very difficult to manage the code.		

=> Branches are used to maintain multiple code bases in the single repository.

=> In Realtime project, we will have below branches

		1) main (default)

		2) develop

		3) feature

		4) qa

		5) uat

		6) release/production

Note: We can create any no.of branches in single repository.

=> If we have branches in git repo then multiple teams can work paralelly without effecting other teams code.

===========================================
What is your project branching strategy ?
===========================================

=> It is the process of deciding which team should use which branch.

		final code => main branch

		dev activites => develop branch

		enhancements => feature branch

		bug fixing => qa branch

		r & d => research branch

		product deployment => release branch

=================================================

1) git stash
2) git merge
3) git rebase
4) git fetch
5) What is merge conflict ?
6) what is git tag?

================================================



==================
git stash command
==================

demo.java

//Story-121 (started : 9 am)

3:00 pm manager told to stop story-121 and work on story - 131

===============
git conflicts
===============

git pull : to bring latest code changes from central repo to local repo


=========================
git merge vs git rebase
=========================

merge : it will merge changes from one branch to another branch and it will preserve commit history.

rebase : it wil merge changes from one branch to another branch and it will not preserve commit history.

=======================
git pull vs git fetch
=======================

git pull: Download changes from central repo to local repo and merge changes in working tree.

git fetch : download changes from central repo to local repo.

Note: To merge changes from local repo to working tree we need to use 'git merge' command

		git pull = git fetch + git merge






git config
git init
git status
git add <filename>
git add .
git restore
git commit -m 'msg'
git push
git clone
git pull
git fetch
git merge
git merge <branch-name>
git rebase <branch-name>
git log
git rm
git branch
git checkout <branch-name>
git stash
git stash apply
git revert <commit-id>


Note: We can create any no.of branches in single repository.

=> If we have branches in git repo then multiple teams can work paralelly without effecting other teams code.

Note: When we execute 'git clone' command then we will get code from default branch which is 'main'.

=> In git bash we can switch from one branch to another branch is 'git checkout' command

===========================
What is Branch Merging ?
===========================

=> Merging changes from one branch to another branch is called as Branch merging.

=> We will use 'Pull Request' to perform branch merging.

====================
Git Branches Task
====================

1) Create branches in git hub repository

2) Clone git hub repo

3) Switch from main branch to develop branch using 'git checkout'

4) Create file + Add to staging + commit + push that file 

5) Create pull request to merge develop branch changes to main branch

==========================
What is .gitignore file ?
==========================

=> .gitignore is used to exclude files & folders from our commits

Ex: In maven project,  we should n't commit target folder to git repository hence we can give this info to git using .gitignore file.

========================
What is git Conflict ?
========================

=> When two people making changes in same file and same line then we will get conflicts problem.

=> When conflict occurs we have to resolve them.

=> Conflict can occur in two scenarios

	1) When we execute git pull command 
	2) When we are merging branches


============================================
1) How to remove git local commits ?

	$ git reset HEAD~1

2) How to revert git commits from remote repo?

	$ git revert <commit-id>

Note: After executing git revert we have to execute git push also

3) what is git stash ?

=> It is used to save working tree changes to temporary area and make working tree clean.

		$ git stash

=> We can get stashed changes back using 'git stash apply'

4) Git merge vs Git rebase ?

=> merge & rebase commands are used for branch merging from CLI

merge : It preserve commit history

rebase : It won't preseve commit history


5) What is tag in git ?

=> tags are used to make stage level commits

# Creating tag
$ git tag <tag-name>

# Display all tags
$ git tag

# Push tags to remote repo
$ git push origin --tags


================================

1) git config
2) git init
3) git status
4) git add
5) git commit
6) git push
7) git log
8) git rm
9) git clone
10) git branch
11) git checkout
12) git pull
13) git restore
14) git reset
15) git revert
16) git merge
17) git stash
18) git stash apply

==========================

1) What is Git Hub
2) Git Hub Account Creation
3) Git Client installation 
4) Git Repo creation
5) Git Architecture
6) Git Bash Commands
7) Pushing Maven project to git repo
8) Git Branches
9) Branch Merging
10) Pull Request
11) .gitignore file
12) Git Conflicts
13) Working with Bitbucket
14) Working with tags

===================================


🔥 *Git Hub Lab Task* 🔥

1) Create Maven Web Application
2) Package maven project as war file
3) Create repository in github / bitbucket (public repo)
4) Push maven project into repo using gitbash
   (target folder shouldn't be commited, add this in .gitignore file)
5) Make changes in pom.xml and push changes to repo using git bash
6) Make code changes in index.jsp file and push to central repo
7) Create 'feature' branch in git repo from main branch
8) Switch to feature branch from git bash
9) Make changes in 'feature' branch pom.xml file 
10) Push changes to feature branch
11) Create pull request and merge 'feature' branch changes to 'main' branch


===========================
Realtime Work Process
===========================

1) Developers will send request for DevOps team to create git repository for the project with manager approval.

2) DevOps team will provide Repo Access for team members (RBAC)

3) DevOps team will create git repo and will share that repo URL with Dev Team.

4) Dev team will push their code into git repo and Dev Team will create required branches also

Note: DevOps team will decide Branching strategy for the project.

5) DevOps team will clone git repo for build and deployment process

Real time Interview Question
----------------------------

1) How will you know in Git if a branch has been already merged into master?

git branch --merged master  -- list branches merged into master

git branch --no-merged

or you can use the git merge-base command to find the latest common commit between the two branches. 

2) How can you bring a new feature in the main branch?

To bring a new feature in the main branch, you can use a command "git merge" or "git pull" command.

3) I want delete branch both Locally and Remotely?

	git branch -d <branch_name>
4) Delete Remote Branch 

You can delete a remote branch using 

git push <remote_name> --delete <branch_name>

5) Difference between git clone Vs git remote 

Functionality:

git clone is a one-time action for creating a local copy of a repository.

git remote manages connections to remote repositories and is used throughout the repository's lifecycle.

git clone <URL>   --> Creates a new repository. (Downloads the repository's content (files, history, branches, etc.).)

git remote add 

Purpose: Manages the connections to remote repositories.

What It Does:

Adds, removes, or displays remote repository URLs.

Allows you to interact with remotes (e.g., fetch, pull, or push changes).

Add a new remote:
git remote add origin https://github.com/mothukuri/my-first-app.git

View existing remotes:
git remote -v

push or pull changes:

git push origin main
git pull origin main

6) How can you fix a broken commit?

To fix any broken commit, you will use the command "git commit--amed". 

By running this command, you can fix the broken commit messeage in the editor. 

Git vs GitHub

Git is a version control system, a tool to manage your souce code history.

GitHub is a hosting service for Git repositories.

7) How do you find a list of files that has changes in a particular commit?

git diff


8) one of your teammate delete the branch, How do you recover it?

Check our the latest commit to this branch in the reflog using command like 
git reflog

and then check it out as a neew branch using command like

git checkout -b branch_name











